#!/usr/bin/python3
import argparse
import logging
import subprocess

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# Create a command line utility that creates a worktree for each branch
# in the current repository.
class GitWt:
    def __init__(self):
        self.worktree_dir = self.get_root_of_current_git_repo() + "/__worktrees"
        logger.info(f"Worktree directory: {self.worktree_dir}")

    def get_root_of_current_git_repo(self):
        try:
            root = self.run(f"git rev-parse --show-toplevel")[0]
            logger.info(f"Git root directory: {root}")
            return root
        except Exception as e:
            raise e

    def run(self, command: str):
        return subprocess.run(
            command,
            shell=True,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
        ).stdout.splitlines()

    def get_worktrees(self):
        # Get the list of all branches.
        try:
            worktrees = self.run(f"git worktree list")
            worktrees = [
                worktree.split(" ")[0]
                for worktree in worktrees
                if "[main]" not in worktree and "[master]" not in worktree
            ]
            logger.info(f"Current Worktrees: {worktrees}")
            return worktrees
        except Exception as e:
            raise e

    def get_missing_branches(self):
        # Get the list of all branches that are not added to the worktree.
        try:
            branches = self.run(f"git branch -l")
            # Get only the branches that start with ' '
            branches = [branch.split(" ")[2] for branch in branches if branch.startswith(" ")]
            return branches
        except Exception as e:
            raise e

    def sync(self):
        try:
            branches = self.get_missing_branches()
            # Create a worktree for each branch.
            for branch in branches:
                self.run(f"git worktree add {self.worktree_dir}/{branch} {branch}")
            # Sync the worktrees to the remote.
            self.run(f"git worktree prune")

        except Exception as e:
            raise e

    def add(self, branch_name: str):
        try:
            # Create a worktree for the given branch.
            self.run(f"git worktree add {self.worktree_dir}/{branch_name} {branch_name}")
            logger.info(f"Added worktree: {branch_name}")
        except Exception as e:
            raise e

    def clean(self):
        try:
            # Remove all worktrees.
            worktrees = self.get_worktrees()
            for worktree in worktrees:
                try:
                    self.run(f"git worktree remove {worktree}")
                    logger.info(f"Removed worktree: {worktree}")
                except Exception as e:
                    logger.error(f"Error removing worktree {worktree}: {e}")
            self.run(f"rm -rf {self.worktree_dir}")
        except Exception as e:
            raise e


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Git worktree utility",
    )

    parser.add_argument(
        "--sync",
        action="store_true",
        help="Sync the worktrees to the remote.",
    )

    parser.add_argument(
        "--clean",
        action="store_true",
        help="Clean all worktrees.",
    )

    parser.add_argument(
        "--add",
        action="store",
        help="Add a worktree for the given branch.",
    )

    args = parser.parse_args()

    git_wt = GitWt()

    if args.sync:
        git_wt.sync()
    elif args.clean:
        git_wt.clean()
    elif args.add:
        git_wt.add(args.add)
    else:
        print("Please specify an option")
        parser.print_help()
        exit(1)

    exit(0)
